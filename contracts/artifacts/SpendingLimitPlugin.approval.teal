#pragma version 10

// This TEAL was generated by TEALScript v0.90.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64)void
*abi_route_createApplication:
	// timePeriod: uint64
	txna ApplicationArgs 2
	btoi

	// abstractedAccountApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64)void
	callsub createApplication
	int 1
	return

// createApplication(abstractedAccountApp: uint64, timePeriod: uint64): void
createApplication:
	proto 2 0

	// contracts/plugins/spending_limit_plugin.algo.ts:23
	// assert(timePeriod > 0)
	frame_dig -2 // timePeriod: uint64
	int 0
	>
	assert

	// contracts/plugins/spending_limit_plugin.algo.ts:24
	// this.abstractedAccountAppID.value = abstractedAccountApp
	byte 0x616273747261637465644163636f756e744170704944 // "abstractedAccountAppID"
	frame_dig -1 // abstractedAccountApp: uint64
	app_global_put

	// contracts/plugins/spending_limit_plugin.algo.ts:25
	// this.timePeriod.value = timePeriod
	byte 0x74696d65506572696f64 // "timePeriod"
	frame_dig -2 // timePeriod: uint64
	app_global_put
	retsub

// _getApp()uint64
*abi_route__getApp:
	// The ABI return prefix
	byte 0x151f7c75

	// execute _getApp()uint64
	callsub _getApp
	itob
	concat
	log
	int 1
	return

// _getApp(): AppID
_getApp:
	proto 0 1

	// contracts/plugins/spending_limit_plugin.algo.ts:29
	// return AppID.fromUint64(this.abstractedAccountAppID.value);
	byte 0x616273747261637465644163636f756e744170704944 // "abstractedAccountAppID"
	app_global_get
	retsub

// _getAppAdmin()address
*abi_route__getAppAdmin:
	// The ABI return prefix
	byte 0x151f7c75

	// execute _getAppAdmin()address
	callsub _getAppAdmin
	concat
	log
	int 1
	return

// _getAppAdmin(): Address
_getAppAdmin:
	proto 0 1

	// contracts/plugins/spending_limit_plugin.algo.ts:33
	// return this._getApp().globalState("a") as Address;
	callsub _getApp
	byte 0x61 // "a"
	app_global_get_ex
	assert
	retsub

// setSpendingLimit(address,uint64,uint64)void
*abi_route_setSpendingLimit:
	// limit: uint64
	txna ApplicationArgs 3
	btoi

	// assetId: uint64
	txna ApplicationArgs 2
	btoi

	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setSpendingLimit(address,uint64,uint64)void
	callsub setSpendingLimit
	int 1
	return

// setSpendingLimit(account: Address, assetId: uint64, limit: uint64): void
setSpendingLimit:
	proto 3 0

	// contracts/plugins/spending_limit_plugin.algo.ts:37
	// assert(this.txn.sender == this._getAppAdmin())
	txn Sender
	callsub _getAppAdmin
	==
	assert

	// contracts/plugins/spending_limit_plugin.algo.ts:38
	// this.spendingLimits({
	//       account: account,
	//       asset: assetId,
	//     }).value = {
	//       limit: limit,
	//       timestamp: 0,
	//       spentAmount: 0,
	//     }
	byte 0x736c // "sl"
	frame_dig -1 // account: Address
	frame_dig -2 // assetId: uint64
	itob
	concat
	concat
	frame_dig -3 // limit: uint64
	itob
	byte 0x0000000000000000
	concat
	byte 0x0000000000000000
	concat
	box_put
	retsub

// removeSpendingLimit(address,uint64)void
*abi_route_removeSpendingLimit:
	// assetId: uint64
	txna ApplicationArgs 2
	btoi

	// account: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute removeSpendingLimit(address,uint64)void
	callsub removeSpendingLimit
	int 1
	return

// removeSpendingLimit(account: Address, assetId: uint64): void
removeSpendingLimit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/plugins/spending_limit_plugin.algo.ts:49
	// assert(this.txn.sender == this._getAppAdmin())
	txn Sender
	callsub _getAppAdmin
	==
	assert

	// contracts/plugins/spending_limit_plugin.algo.ts:52
	// preMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMbr: uint64

	// contracts/plugins/spending_limit_plugin.algo.ts:53
	// this.spendingLimits({
	//       account: account,
	//       asset: assetId,
	//     }).delete()
	byte 0x736c // "sl"
	frame_dig -1 // account: Address
	frame_dig -2 // assetId: uint64
	itob
	concat
	concat
	box_del

	// contracts/plugins/spending_limit_plugin.algo.ts:57
	// postMbr = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 1 // postMbr: uint64

	// contracts/plugins/spending_limit_plugin.algo.ts:60
	// sendPayment({
	//       sender: this.app.address,
	//       receiver: this.txn.sender,
	//       amount: preMbr - postMbr,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/plugins/spending_limit_plugin.algo.ts:61
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/plugins/spending_limit_plugin.algo.ts:62
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/plugins/spending_limit_plugin.algo.ts:63
	// amount: preMbr - postMbr
	frame_dig 0 // preMbr: uint64
	frame_dig 1 // postMbr: uint64
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// spend(address,address,uint64,uint64)void
*abi_route_spend:
	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// assetId: uint64
	txna ApplicationArgs 3
	btoi

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// controlledAccount: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute spend(address,address,uint64,uint64)void
	callsub spend
	int 1
	return

// spend(controlledAccount: Address, receiver: Address, assetId: uint64, amount: uint64): void
spend:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// contracts/plugins/spending_limit_plugin.algo.ts:73
	// key: SpendingLimitKey = {
	//       account: this.txn.sender,
	//       asset: assetId,
	//     }
	txn Sender
	frame_dig -3 // assetId: uint64
	itob
	concat
	frame_bury 0 // key: SpendingLimitKey

	// contracts/plugins/spending_limit_plugin.algo.ts:80
	// assert(this.spendingLimits(key).exists)
	byte 0x736c // "sl"
	frame_dig 0 // key: SpendingLimitKey
	concat
	box_len
	swap
	pop
	assert

	// contracts/plugins/spending_limit_plugin.algo.ts:81
	// spendingLimit = this.spendingLimits(key).value
	byte 0x736c // "sl"
	frame_dig 0 // key: SpendingLimitKey
	concat
	frame_bury 1 // storage key//spendingLimit

	// contracts/plugins/spending_limit_plugin.algo.ts:84
	// spentAmount = amount
	frame_dig -4 // amount: uint64
	frame_bury 2 // spentAmount: uint64

	// contracts/plugins/spending_limit_plugin.algo.ts:85
	// timestamp = globals.latestTimestamp - (globals.latestTimestamp % this.timePeriod.value)
	global LatestTimestamp
	global LatestTimestamp
	byte 0x74696d65506572696f64 // "timePeriod"
	app_global_get
	%
	-
	frame_bury 3 // timestamp: uint64

	// *if0_condition
	// contracts/plugins/spending_limit_plugin.algo.ts:86
	// spendingLimit.timestamp == timestamp
	int 8 // headOffset
	int 8
	byte 0x736c // "sl"
	frame_dig 0 // key: SpendingLimitKey
	concat
	cover 2
	box_extract
	btoi
	frame_dig 3 // timestamp: uint64
	==
	bz *if0_end

	// *if0_consequent
	// contracts/plugins/spending_limit_plugin.algo.ts:87
	// spentAmount = spentAmount + spendingLimit.spentAmount
	frame_dig 2 // spentAmount: uint64
	int 16 // headOffset
	int 8
	byte 0x736c // "sl"
	frame_dig 0 // key: SpendingLimitKey
	concat
	cover 2
	box_extract
	btoi
	+
	frame_bury 2 // spentAmount: uint64

*if0_end:
	// contracts/plugins/spending_limit_plugin.algo.ts:89
	// assert(spentAmount <= spendingLimit.limit)
	frame_dig 2 // spentAmount: uint64
	int 0
	int 8
	byte 0x736c // "sl"
	frame_dig 0 // key: SpendingLimitKey
	concat
	cover 2
	box_extract
	btoi
	<=
	assert

	// contracts/plugins/spending_limit_plugin.algo.ts:90
	// spendingLimit.spentAmount = spentAmount
	int 16 // headOffset
	frame_dig 2 // spentAmount: uint64
	itob
	frame_dig 1 // storage key//spendingLimit
	cover 2
	box_replace

	// contracts/plugins/spending_limit_plugin.algo.ts:91
	// spendingLimit.timestamp = timestamp
	int 8 // headOffset
	frame_dig 3 // timestamp: uint64
	itob
	frame_dig 1 // storage key//spendingLimit
	cover 2
	box_replace

	// *if1_condition
	// contracts/plugins/spending_limit_plugin.algo.ts:94
	// assetId == 0
	frame_dig -3 // assetId: uint64
	int 0
	==
	bz *if1_else

	// *if1_consequent
	// contracts/plugins/spending_limit_plugin.algo.ts:95
	// sendPayment({
	//         sender: controlledAccount,
	//         receiver: receiver,
	//         amount: amount,
	//         rekeyTo: controlledAccount,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/plugins/spending_limit_plugin.algo.ts:96
	// sender: controlledAccount
	frame_dig -1 // controlledAccount: Address
	itxn_field Sender

	// contracts/plugins/spending_limit_plugin.algo.ts:97
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts/plugins/spending_limit_plugin.algo.ts:98
	// amount: amount
	frame_dig -4 // amount: uint64
	itxn_field Amount

	// contracts/plugins/spending_limit_plugin.algo.ts:99
	// rekeyTo: controlledAccount
	frame_dig -1 // controlledAccount: Address
	itxn_field RekeyTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// contracts/plugins/spending_limit_plugin.algo.ts:102
	// sendAssetTransfer({
	//         sender: controlledAccount,
	//         xferAsset: AssetID.fromUint64(assetId),
	//         assetReceiver: receiver,
	//         assetAmount: amount,
	//         rekeyTo: controlledAccount,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/plugins/spending_limit_plugin.algo.ts:103
	// sender: controlledAccount
	frame_dig -1 // controlledAccount: Address
	itxn_field Sender

	// contracts/plugins/spending_limit_plugin.algo.ts:104
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig -3 // assetId: uint64
	itxn_field XferAsset

	// contracts/plugins/spending_limit_plugin.algo.ts:105
	// assetReceiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field AssetReceiver

	// contracts/plugins/spending_limit_plugin.algo.ts:106
	// assetAmount: amount
	frame_dig -4 // amount: uint64
	itxn_field AssetAmount

	// contracts/plugins/spending_limit_plugin.algo.ts:107
	// rekeyTo: controlledAccount
	frame_dig -1 // controlledAccount: Address
	itxn_field RekeyTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

*create_NoOp:
	method "createApplication(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "_getApp()uint64"
	method "_getAppAdmin()address"
	method "setSpendingLimit(address,uint64,uint64)void"
	method "removeSpendingLimit(address,uint64)void"
	method "spend(address,address,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route__getApp *abi_route__getAppAdmin *abi_route_setSpendingLimit *abi_route_removeSpendingLimit *abi_route_spend
	err