{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "saveAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyAppAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekey(appl,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekeyToApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToAsset(asset,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "eoa": {
          "type": "bytes",
          "key": "eoa"
        },
        "eoaAuthAddr": {
          "type": "bytes",
          "key": "eoaAuthAddr"
        },
        "forceFlash": {
          "type": "bytes",
          "key": "forceFlash"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedOptIn",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account for an EOA",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "saveAuthAddr",
        "desc": "Save the auth addr of the EOA in state so we can rekey back to it later",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyAppAuthAddr",
        "desc": "Verify the contract account is not rekeyed",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekey",
        "desc": "Rekey this contract account to the EOA",
        "args": [
          {
            "name": "saveAuthAddrCall",
            "type": "appl",
            "desc": "Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn group as this call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekeyToApp",
        "desc": "Temporarily rekey to an approved app",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addApp",
        "desc": "Add an app to the list of approved apps",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeApp",
        "desc": "Remove an app from the list of approved apps",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "asset"
          },
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}