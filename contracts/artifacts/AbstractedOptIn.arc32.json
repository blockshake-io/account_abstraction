{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "saveAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekey(appl,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addProgram(byte[],uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeProgram(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "callProgram(application,byte[32],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToAsset(asset,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "eoa": {
          "type": "bytes",
          "key": "eoa"
        },
        "eoaAuthAddr": {
          "type": "bytes",
          "key": "eoaAuthAddr"
        },
        "forceFlash": {
          "type": "bytes",
          "key": "forceFlash"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedOptIn",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account for an EOA",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "saveAuthAddr",
        "desc": "Save the auth addr of the EOA in state so we can rekey back to it later",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekey",
        "desc": "Rekey this contract account to the EOA",
        "args": [
          {
            "name": "saveAuthAddrCall",
            "type": "appl",
            "desc": "Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn as the call to saveAuthAddr()"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addProgram",
        "desc": "Add a program to this abstracted account",
        "args": [
          {
            "name": "program",
            "type": "byte[]",
            "desc": "The program to add"
          },
          {
            "name": "globalNumUint",
            "type": "uint64",
            "desc": "The number of global uints this program requires"
          },
          {
            "name": "globalNumByteSlice",
            "type": "uint64",
            "desc": "The number of global byte slices this program requires"
          },
          {
            "name": "localNumByteSlice",
            "type": "uint64",
            "desc": "The number of local byte slices this program requires"
          },
          {
            "name": "localNumUint",
            "type": "uint64",
            "desc": "The number of local uints this program requires"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeProgram",
        "desc": "Remove a program from this abstracted account",
        "args": [
          {
            "name": "programHash",
            "type": "byte[32]",
            "desc": "The hash of the program to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "callProgram",
        "desc": "Calls one of the deploy programs for this abstracted accountTODO: Think of good way to pass args",
        "args": [
          {
            "name": "_appID",
            "type": "application"
          },
          {
            "name": "programHash",
            "type": "byte[32]",
            "desc": "The hash of the program to call"
          },
          {
            "name": "method",
            "type": "byte[]",
            "desc": "The method selector to call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "asset",
            "type": "asset"
          },
          {
            "name": "mbrPayment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}