#pragma version 10

// This TEAL was generated by TEALScript v0.68.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication()void
//
// Create an abstracted account for an EOA
createApplication:
	proto 0 0

	// contracts/abstracted_account.algo.ts:26
	// this.eoa.value = this.txn.sender
	byte 0x656f61 // "eoa"
	txn Sender
	app_global_put

	// contracts/abstracted_account.algo.ts:27
	// this.eoaAuthAddr.value =
	//       this.txn.sender.authAddr === Address.zeroAddress ? this.txn.sender : this.txn.sender.authAddr
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	txn Sender
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary0_false
	txn Sender
	b ternary0_end

ternary0_false:
	txn Sender
	acct_params_get AcctAuthAddr
	assert

ternary0_end:
	app_global_put
	retsub

abi_route_saveAuthAddr:
	// execute saveAuthAddr()void
	callsub saveAuthAddr
	int 1
	return

// saveAuthAddr()void
//
// Save the auth addr of the EOA in state so we can rekey back to it later
saveAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:35
	// this.eoaAuthAddr.value = this.eoa.value.authAddr === Address.zeroAddress ? this.eoa.value : this.eoa.value.authAddr
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	byte 0x656f61 // "eoa"
	app_global_get
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary1_false
	byte 0x656f61 // "eoa"
	app_global_get
	b ternary1_end

ternary1_false:
	byte 0x656f61 // "eoa"
	app_global_get
	acct_params_get AcctAuthAddr
	assert

ternary1_end:
	app_global_put
	retsub

abi_route_rekey:
	// flash: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// saveAuthAddrCall: appl
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int appl
	==
	assert

	// execute rekey(bool,appl)void
	callsub rekey
	int 1
	return

// rekey(bool,appl)void
//
// Rekey this contract account to the EOA
//
// @param saveAuthAddrCall Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn as the call to saveAuthAddr()
rekey:
	proto 2 0

	// contracts/abstracted_account.algo.ts:45
	// verifyAppCallTxn(saveAuthAddrCall, { applicationID: this.app })
	// verify applicationID
	frame_dig -1 // saveAuthAddrCall: AppCallTxn
	gtxns ApplicationID
	txna Applications 0
	==
	assert

	// contracts/abstracted_account.algo.ts:46
	// assert(saveAuthAddrCall.applicationArgs[0] === method('saveAuthAddr()void'))
	frame_dig -1 // saveAuthAddrCall: AppCallTxn
	gtxns ApplicationArgs 0
	method "saveAuthAddr()void"
	==
	assert

	// contracts/abstracted_account.algo.ts:48
	// sendPayment({
	//       receiver: this.eoa.value,
	//       rekeyTo: this.eoaAuthAddr.value,
	//       note: 'rekeying to EOA',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:49
	// receiver: this.eoa.value
	byte 0x656f61 // "eoa"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:50
	// rekeyTo: this.eoaAuthAddr.value
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	app_global_get
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:51
	// note: 'rekeying to EOA'
	byte 0x72656b6579696e6720746f20454f41 // "rekeying to EOA"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if0_condition
	// contracts/abstracted_account.algo.ts:54
	// flash || this.forceFlash.value
	frame_dig -2 // flash: boolean
	dup
	bnz skip_or0
	byte 0x666f726365466c617368 // "forceFlash"
	app_global_get
	int 0
	getbit
	||

skip_or0:
	bz if0_end

	// if0_consequent
	// contracts/abstracted_account.algo.ts:55
	// verifyTxn(this.txnGroup[this.txnGroup.length - 1], {
	//         sender: this.app.address,
	//         rekeyTo: this.app.address,
	//       })
	global GroupSize
	int 1
	-
	store 248 // verifyTxn index

	// verify sender
	load 248 // verifyTxn index
	gtxns Sender
	global CurrentApplicationAddress
	==
	assert

	// verify rekeyTo
	load 248 // verifyTxn index
	gtxns RekeyTo
	global CurrentApplicationAddress
	==
	assert

if0_end:
	retsub

abi_route_addProgram:
	// localNumUint: uint64
	txna ApplicationArgs 5
	btoi

	// localNumByteSlice: uint64
	txna ApplicationArgs 4
	btoi

	// globalNumByteSlice: uint64
	txna ApplicationArgs 3
	btoi

	// globalNumUint: uint64
	txna ApplicationArgs 2
	btoi

	// program: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute addProgram(uint64,uint64,uint64,uint64,byte[])void
	callsub addProgram
	int 1
	return

// addProgram(uint64,uint64,uint64,uint64,byte[])void
//
// Add a program to this abstracted account
//
// @param program The program to add
// @param globalNumUint The number of global uints this program requires
// @param globalNumByteSlice The number of global byte slices this program requires
// @param localNumByteSlice The number of local byte slices this program requires
// @param localNumUint The number of local uints this program requires
addProgram:
	proto 5 0

	// contracts/abstracted_account.algo.ts:79
	// assert(this.txn.sender === this.eoa.value)
	txn Sender
	byte 0x656f61 // "eoa"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:81
	// sendAppCall({
	//       approvalProgram: program,
	//       clearStateProgram: this.app.clearStateProgram,
	//       globalNumByteSlice: globalNumByteSlice,
	//       globalNumUint: globalNumUint,
	//       localNumByteSlice: localNumByteSlice,
	//       localNumUint: localNumUint,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:82
	// approvalProgram: program
	frame_dig -1 // program: bytes
	itxn_field ApprovalProgram

	// contracts/abstracted_account.algo.ts:83
	// clearStateProgram: this.app.clearStateProgram
	txna Applications 0
	app_params_get AppClearStateProgram
	assert
	itxn_field ClearStateProgram

	// contracts/abstracted_account.algo.ts:84
	// globalNumByteSlice: globalNumByteSlice
	frame_dig -3 // globalNumByteSlice: number
	itxn_field GlobalNumByteSlice

	// contracts/abstracted_account.algo.ts:85
	// globalNumUint: globalNumUint
	frame_dig -2 // globalNumUint: number
	itxn_field GlobalNumUint

	// contracts/abstracted_account.algo.ts:86
	// localNumByteSlice: localNumByteSlice
	frame_dig -4 // localNumByteSlice: number
	itxn_field LocalNumByteSlice

	// contracts/abstracted_account.algo.ts:87
	// localNumUint: localNumUint
	frame_dig -5 // localNumUint: number
	itxn_field LocalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/abstracted_account.algo.ts:90
	// this.programs(sha256(program)).value = this.itxn.createdApplicationID
	frame_dig -1 // program: bytes
	sha256
	itxn CreatedApplicationID
	itob
	box_put
	retsub

abi_route_removeProgram:
	// programHash: byte[][32]
	txna ApplicationArgs 1

	// execute removeProgram(byte[][32])void
	callsub removeProgram
	int 1
	return

// removeProgram(byte[][32])void
//
// Remove a program from this abstracted account
//
// @param programHash The hash of the program to remove
removeProgram:
	proto 1 0

	// contracts/abstracted_account.algo.ts:99
	// assert(this.txn.sender === this.eoa.value)
	txn Sender
	byte 0x656f61 // "eoa"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:101
	// this.programs(programHash).delete()
	frame_dig -1 // programHash: bytes32
	box_del
	retsub

abi_route_callProgram:
	// args: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// method: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// programHash: byte[][32]
	txna ApplicationArgs 1

	// execute callProgram(byte[],byte[],byte[][32])void
	callsub callProgram
	int 1
	return

// callProgram(byte[],byte[],byte[][32])void
//
// Calls one of the deploy programs for this abstracted account
//
// TODO: Think of better way to pass ABI args
//
// @param programHash The hash of the program to call
// @param method The method selector to call
// @param args The arguments to pass to the method
callProgram:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:115
	// app = this.programs(programHash).value
	frame_dig -1 // programHash: bytes32
	box_get
	assert
	btoi
	frame_bury 0 // app: application

	// contracts/abstracted_account.algo.ts:117
	// sendAppCall({
	//       applicationID: app,
	//       rekeyTo: app.address,
	//       applicationArgs: [method, args],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:118
	// applicationID: app
	frame_dig 0 // app: application
	itxn_field ApplicationID

	// contracts/abstracted_account.algo.ts:119
	// rekeyTo: app.address
	frame_dig 0 // app: application
	app_params_get AppAddress
	assert
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:120
	// applicationArgs: [method, args]
	frame_dig -2 // method: bytes
	itxn_field ApplicationArgs
	frame_dig -3 // args: bytes
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_optInToAsset:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optInToAsset(pay,asset)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(pay,asset)void
optInToAsset:
	proto 2 0

	// contracts/abstracted_optin.algo.ts:5
	// verifyPayTxn(mbrPayment, {
	//       receiver: this.app.address,
	//       amount: {
	//         // @ts-expect-error TODO: add assetOptInMinBalance to the TEALScript types
	//         greaterThan: globals.assetOptInMinBalance,
	//       },
	//     })
	// verify receiver
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	>
	assert

	// contracts/abstracted_optin.algo.ts:13
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: asset,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/abstracted_optin.algo.ts:14
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/abstracted_optin.algo.ts:15
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/abstracted_optin.algo.ts:16
	// xferAsset: asset
	frame_dig -1 // asset: Asset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "saveAuthAddr()void"
	method "rekey(appl,bool)void"
	method "addProgram(byte[],uint64,uint64,uint64,uint64)void"
	method "removeProgram(byte[][32])void"
	method "callProgram(byte[][32],byte[],byte[])void"
	method "optInToAsset(asset,pay)void"
	txna ApplicationArgs 0
	match abi_route_saveAuthAddr abi_route_rekey abi_route_addProgram abi_route_removeProgram abi_route_callProgram abi_route_optInToAsset
	err