#pragma version 10

// This TEAL was generated by TEALScript v0.68.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication()void
//
// Create an abstracted account for an EOA
createApplication:
	proto 0 0

	// contracts/abstracted_account.algo.ts:28
	// this.eoa.value = this.txn.sender
	byte 0x656f61 // "eoa"
	txn Sender
	app_global_put

	// contracts/abstracted_account.algo.ts:29
	// this.eoaAuthAddr.value =
	//       this.txn.sender.authAddr === Address.zeroAddress ? this.txn.sender : this.txn.sender.authAddr
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	txn Sender
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary0_false
	txn Sender
	b ternary0_end

ternary0_false:
	txn Sender
	acct_params_get AcctAuthAddr
	assert

ternary0_end:
	app_global_put
	retsub

abi_route_saveAuthAddr:
	// execute saveAuthAddr()void
	callsub saveAuthAddr
	int 1
	return

// saveAuthAddr()void
//
// Save the auth addr of the EOA in state so we can rekey back to it later
saveAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:37
	// this.eoaAuthAddr.value = this.eoa.value.authAddr === Address.zeroAddress ? this.eoa.value : this.eoa.value.authAddr
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	byte 0x656f61 // "eoa"
	app_global_get
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	bz ternary1_false
	byte 0x656f61 // "eoa"
	app_global_get
	b ternary1_end

ternary1_false:
	byte 0x656f61 // "eoa"
	app_global_get
	acct_params_get AcctAuthAddr
	assert

ternary1_end:
	app_global_put
	retsub

abi_route_verifyAppAuthAddr:
	// execute verifyAppAuthAddr()void
	callsub verifyAppAuthAddr
	int 1
	return

// verifyAppAuthAddr()void
//
// Verify the contract account is not rekeyed
verifyAppAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:44
	// assert(this.app.address.authAddr === globals.zeroAddress)
	global CurrentApplicationAddress
	acct_params_get AcctAuthAddr
	assert
	global ZeroAddress
	==
	assert
	retsub

// assertVerifyAppAuthAddrIsCalled()void
//
// Make sure that verifyAppAuthAddr is called by the end of the txn group
assertVerifyAppAuthAddrIsCalled:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:52
	// appl = this.txnGroup[this.txnGroup.length - 1]
	global GroupSize
	int 1
	-
	frame_bury 0 // appl: txn

	// contracts/abstracted_account.algo.ts:53
	// verifyAppCallTxn(appl, {
	//       applicationID: this.app,
	//     })
	// verify appl
	frame_dig 0 // appl: txn
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationID
	frame_dig 0 // appl: txn
	gtxns ApplicationID
	txna Applications 0
	==
	assert

	// contracts/abstracted_account.algo.ts:56
	// assert(appl.applicationArgs[0] === method('verifyAppAuthAddr()void'))
	frame_dig 0 // appl: txn
	gtxns ApplicationArgs 0
	method "verifyAppAuthAddr()void"
	==
	assert
	retsub

abi_route_rekeyToEOA:
	// flash: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// saveAuthAddrCall: appl
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int appl
	==
	assert

	// execute rekeyToEOA(bool,appl)void
	callsub rekeyToEOA
	int 1
	return

// rekeyToEOA(bool,appl)void
//
// Rekey this contract account to the EOA
//
// @param saveAuthAddrCall Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn group as this call
rekeyToEOA:
	proto 2 0

	// contracts/abstracted_account.algo.ts:66
	// verifyAppCallTxn(saveAuthAddrCall, { applicationID: this.app })
	// verify applicationID
	frame_dig -1 // saveAuthAddrCall: AppCallTxn
	gtxns ApplicationID
	txna Applications 0
	==
	assert

	// contracts/abstracted_account.algo.ts:67
	// assert(saveAuthAddrCall.applicationArgs[0] === method('saveAuthAddr()void'))
	frame_dig -1 // saveAuthAddrCall: AppCallTxn
	gtxns ApplicationArgs 0
	method "saveAuthAddr()void"
	==
	assert

	// contracts/abstracted_account.algo.ts:69
	// sendPayment({
	//       receiver: this.eoa.value,
	//       rekeyTo: this.eoaAuthAddr.value,
	//       note: 'rekeying to EOA',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:70
	// receiver: this.eoa.value
	byte 0x656f61 // "eoa"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:71
	// rekeyTo: this.eoaAuthAddr.value
	byte 0x656f614175746841646472 // "eoaAuthAddr"
	app_global_get
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:72
	// note: 'rekeying to EOA'
	byte 0x72656b6579696e6720746f20454f41 // "rekeying to EOA"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if0_condition
	// contracts/abstracted_account.algo.ts:75
	// flash || this.forceFlash.value
	frame_dig -2 // flash: boolean
	dup
	bnz skip_or0
	byte 0x666f726365466c617368 // "forceFlash"
	app_global_get
	int 0
	getbit
	||

skip_or0:
	bz if0_end

	// if0_consequent
	// contracts/abstracted_account.algo.ts:76
	// this.assertVerifyAppAuthAddrIsCalled()
	callsub assertVerifyAppAuthAddrIsCalled

if0_end:
	retsub

abi_route_rekeyToApp:
	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute rekeyToApp(application)void
	callsub rekeyToApp
	int 1
	return

// rekeyToApp(application)void
//
// Temporarily rekey to an approved app
//
// @param app The app to rekey to
rekeyToApp:
	proto 1 0

	// contracts/abstracted_account.algo.ts:86
	// assert(this.apps(app).exists)
	frame_dig -1 // app: Application
	itob
	box_len
	swap
	pop
	assert

	// contracts/abstracted_account.algo.ts:88
	// sendPayment({
	//       receiver: this.eoa.value,
	//       rekeyTo: app.address,
	//       note: 'rekeying to app',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:89
	// receiver: this.eoa.value
	byte 0x656f61 // "eoa"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:90
	// rekeyTo: app.address
	frame_dig -1 // app: Application
	app_params_get AppAddress
	assert
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:91
	// note: 'rekeying to app'
	byte 0x72656b6579696e6720746f20617070 // "rekeying to app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/abstracted_account.algo.ts:94
	// this.assertVerifyAppAuthAddrIsCalled()
	callsub assertVerifyAppAuthAddrIsCalled
	retsub

abi_route_addApp:
	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute addApp(application)void
	callsub addApp
	int 1
	return

// addApp(application)void
//
// Add an app to the list of approved apps
//
// @param app The app to add
addApp:
	proto 1 0

	// contracts/abstracted_account.algo.ts:103
	// assert(this.txn.sender === this.eoa.value)
	txn Sender
	byte 0x656f61 // "eoa"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:105
	// this.apps(app).create(0)
	frame_dig -1 // app: Application
	itob
	int 0
	box_create
	retsub

abi_route_removeApp:
	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute removeApp(application)void
	callsub removeApp
	int 1
	return

// removeApp(application)void
//
// Remove an app from the list of approved apps
//
// @param app The app to remove
removeApp:
	proto 1 0

	// contracts/abstracted_account.algo.ts:114
	// assert(this.txn.sender === this.eoa.value)
	txn Sender
	byte 0x656f61 // "eoa"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:116
	// this.apps(app).delete()
	frame_dig -1 // app: Application
	itob
	box_del
	retsub

abi_route_optInToAsset:
	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute optInToAsset(pay,asset)void
	callsub optInToAsset
	int 1
	return

// optInToAsset(pay,asset)void
optInToAsset:
	proto 2 0

	// contracts/abstracted_optin.algo.ts:5
	// verifyPayTxn(mbrPayment, {
	//       receiver: this.app.address,
	//       amount: {
	//         // @ts-expect-error TODO: add assetOptInMinBalance to the TEALScript types
	//         greaterThan: globals.assetOptInMinBalance,
	//       },
	//     })
	// verify receiver
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -2 // mbrPayment: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	>
	assert

	// contracts/abstracted_optin.algo.ts:13
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: asset,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/abstracted_optin.algo.ts:14
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/abstracted_optin.algo.ts:15
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/abstracted_optin.algo.ts:16
	// xferAsset: asset
	frame_dig -1 // asset: Asset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "saveAuthAddr()void"
	method "verifyAppAuthAddr()void"
	method "rekeyToEOA(appl,bool)void"
	method "rekeyToApp(application)void"
	method "addApp(application)void"
	method "removeApp(application)void"
	method "optInToAsset(asset,pay)void"
	txna ApplicationArgs 0
	match abi_route_saveAuthAddr abi_route_verifyAppAuthAddr abi_route_rekeyToEOA abi_route_rekeyToApp abi_route_addApp abi_route_removeApp abi_route_optInToAsset
	err