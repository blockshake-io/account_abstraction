#pragma version 10

// This TEAL was generated by TEALScript v0.68.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// verifyRekeyToAbstractedAccount()void
//
// Ensure that by the end of the group the abstracted account has control of its address
verifyRekeyToAbstractedAccount:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:23
	// lastTxn = this.txnGroup[this.txnGroup.length - 1]
	global GroupSize
	int 1
	-
	frame_bury 0 // lastTxn: txn

	// if0_condition
	// contracts/abstracted_account.algo.ts:26
	// lastTxn.sender !== this.address.value || lastTxn.rekeyTo !== this.getAuthAddr()
	frame_dig 0 // lastTxn: txn
	gtxns Sender
	byte 0x61646472657373 // "address"
	app_global_get
	!=
	dup
	bnz skip_or0
	frame_dig 0 // lastTxn: txn
	gtxns RekeyTo
	callsub getAuthAddr
	!=
	||

skip_or0:
	bz if0_end

	// if0_consequent
	// contracts/abstracted_account.algo.ts:27
	// verifyAppCallTxn(lastTxn, {
	//         applicationID: this.app,
	//       })
	// verify appl
	frame_dig 0 // lastTxn: txn
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationID
	frame_dig 0 // lastTxn: txn
	gtxns ApplicationID
	txna Applications 0
	==
	assert

	// contracts/abstracted_account.algo.ts:30
	// assert(lastTxn.applicationArgs[0] === method('verifyAuthAddr()void'))
	frame_dig 0 // lastTxn: txn
	gtxns ApplicationArgs 0
	method "verifyAuthAddr()void"
	==
	assert

if0_end:
	retsub

// getAuthAddr()address
//
// What the value of this.address.value.authAddr should be when this.address
// is able to be controlled by this app. It will either be this.app.address or zeroAddress
getAuthAddr:
	proto 0 1

	// contracts/abstracted_account.algo.ts:39
	// return this.address.value === this.app.address ? Address.zeroAddress : this.app.address;
	byte 0x61646472657373 // "address"
	app_global_get
	global CurrentApplicationAddress
	==
	bz ternary0_false
	global ZeroAddress
	b ternary0_end

ternary0_false:
	global CurrentApplicationAddress

ternary0_end:
	retsub

abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// address: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	int 1
	return

// createApplication(address,address)void
//
// Create an abstracted account application
//
// @param address The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
// @param admin The admin for this app
createApplication:
	proto 2 0

	// contracts/abstracted_account.algo.ts:49
	// verifyAppCallTxn(this.txn, {
	//       sender: { includedIn: [address, admin] },
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // address: Address
	==
	txn Sender
	frame_dig -2 // admin: Address
	==
	||
	assert

	// contracts/abstracted_account.algo.ts:53
	// assert(admin !== address)
	frame_dig -2 // admin: Address
	frame_dig -1 // address: Address
	!=
	assert

	// contracts/abstracted_account.algo.ts:55
	// this.admin.value = admin
	byte 0x61646d696e // "admin"
	frame_dig -2 // admin: Address
	app_global_put

	// contracts/abstracted_account.algo.ts:56
	// this.address.value = address === Address.zeroAddress ? this.app.address : address
	byte 0x61646472657373 // "address"
	frame_dig -1 // address: Address
	global ZeroAddress
	==
	bz ternary1_false
	global CurrentApplicationAddress
	b ternary1_end

ternary1_false:
	frame_dig -1 // address: Address

ternary1_end:
	app_global_put
	retsub

abi_route_verifyAuthAddr:
	// execute verifyAuthAddr()void
	callsub verifyAuthAddr
	int 1
	return

// verifyAuthAddr()void
//
// Verify the abstracted account is rekeyed to this app
verifyAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:63
	// assert(this.address.value.authAddr === this.getAuthAddr())
	byte 0x61646472657373 // "address"
	app_global_get
	acct_params_get AcctAuthAddr
	assert
	callsub getAuthAddr
	==
	assert
	retsub

abi_route_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute rekeyTo(bool,address)void
	callsub rekeyTo
	int 1
	return

// rekeyTo(bool,address)void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
rekeyTo:
	proto 2 0

	// contracts/abstracted_account.algo.ts:73
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:75
	// sendPayment({
	//       sender: this.address.value,
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:76
	// sender: this.address.value
	byte 0x61646472657373 // "address"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:77
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:78
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:79
	// note: 'rekeying abstracted account'
	byte 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if1_condition
	// contracts/abstracted_account.algo.ts:82
	// flash
	frame_dig -2 // flash: boolean
	bz if1_end

	// if1_consequent
	// contracts/abstracted_account.algo.ts:82
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount

if1_end:
	retsub

abi_route_rekeyToPlugin:
	// plugin: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute rekeyToPlugin(application)void
	callsub rekeyToPlugin
	int 1
	return

// rekeyToPlugin(application)void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
rekeyToPlugin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:91
	// assert(this.plugins(plugin).exists)
	frame_dig -1 // plugin: Application
	itob
	box_len
	swap
	pop
	assert

	// contracts/abstracted_account.algo.ts:93
	// sendPayment({
	//       sender: this.address.value,
	//       receiver: this.address.value,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:94
	// sender: this.address.value
	byte 0x61646472657373 // "address"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:95
	// receiver: this.address.value
	byte 0x61646472657373 // "address"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:96
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: Application
	app_params_get AppAddress
	assert
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:97
	// note: 'rekeying to plugin app'
	byte 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/abstracted_account.algo.ts:100
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount
	retsub

abi_route_changeAdmin:
	// newAdmin: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute changeAdmin(account)void
	callsub changeAdmin
	int 1
	return

// changeAdmin(account)void
//
// Change the admin for this app
//
// @param newAdmin The new admin
changeAdmin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:109
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:110
	// this.admin.value = newAdmin
	byte 0x61646d696e // "admin"
	frame_dig -1 // newAdmin: Account
	app_global_put
	retsub

abi_route_addPlugin:
	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute addPlugin(application)void
	callsub addPlugin
	int 1
	return

// addPlugin(application)void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
addPlugin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:119
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:121
	// this.plugins(app).create(0)
	frame_dig -1 // app: Application
	itob
	int 0
	box_create
	retsub

abi_route_removePlugin:
	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute removePlugin(application)void
	callsub removePlugin
	int 1
	return

// removePlugin(application)void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
removePlugin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:130
	// assert(this.txn.sender === this.admin.value)
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:132
	// this.plugins(app).delete()
	frame_dig -1 // app: Application
	itob
	box_del
	retsub

create_NoOp:
	method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "verifyAuthAddr()void"
	method "rekeyTo(address,bool)void"
	method "rekeyToPlugin(application)void"
	method "changeAdmin(account)void"
	method "addPlugin(application)void"
	method "removePlugin(application)void"
	txna ApplicationArgs 0
	match abi_route_verifyAuthAddr abi_route_rekeyTo abi_route_rekeyToPlugin abi_route_changeAdmin abi_route_addPlugin abi_route_removePlugin
	err