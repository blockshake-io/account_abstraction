#pragma version 10

// This TEAL was generated by TEALScript v0.81.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// verifyRekeyToAbstractedAccount(): void
//
// Ensure that by the end of the group the abstracted account has control of its address
verifyRekeyToAbstractedAccount:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:32
	// lastTxn = this.txnGroup[this.txnGroup.length - 1]
	global GroupSize
	int 1
	-
	frame_bury 0 // lastTxn: txn

	// if0_condition
	// contracts/abstracted_account.algo.ts:35
	// lastTxn.sender !== this.controlledAddress.value || lastTxn.rekeyTo !== this.getAuthAddr()
	frame_dig 0 // lastTxn: txn
	gtxns Sender
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	!=
	dup
	bnz skip_or0
	frame_dig 0 // lastTxn: txn
	gtxns RekeyTo
	callsub getAuthAddr
	!=
	||

skip_or0:
	bz if0_end

	// if0_consequent
	// contracts/abstracted_account.algo.ts:36
	// verifyAppCallTxn(lastTxn, {
	//         applicationID: this.app,
	//         applicationArgs: {
	//           0: method('arc58_verifyAuthAddr()void'),
	//         },
	//       })
	// verify appl
	frame_dig 0 // lastTxn: txn
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationID
	frame_dig 0 // lastTxn: txn
	gtxns ApplicationID
	txna Applications 0
	==
	assert

	// verify applicationArgs
	// verify applicationArgs 0
	frame_dig 0 // lastTxn: txn
	gtxns ApplicationArgs 0
	method "arc58_verifyAuthAddr()void"
	==
	assert

if0_end:
	retsub

// getAuthAddr(): Address
//
// What the value of this.address.value.authAddr should be when this.address
// is able to be controlled by this app. It will either be this.app.address or zeroAddress
getAuthAddr:
	proto 0 1

	// contracts/abstracted_account.algo.ts:50
	// return this.controlledAddress.value === this.app.address ? Address.zeroAddress : this.app.address;
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	global CurrentApplicationAddress
	==
	bz ternary0_false
	global ZeroAddress
	b ternary0_end

ternary0_false:
	global CurrentApplicationAddress

ternary0_end:
	retsub

// createApplication(address,address)void
abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// controlledAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	int 1
	return

// createApplication(controlledAddress: Address, admin: Address): void
//
// Create an abstracted account application
//
// @param controlledAddress The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
// @param admin The admin for this app
createApplication:
	proto 2 0

	// contracts/abstracted_account.algo.ts:60
	// verifyAppCallTxn(this.txn, {
	//       sender: { includedIn: [controlledAddress, admin] },
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // controlledAddress: Address
	==
	txn Sender
	frame_dig -2 // admin: Address
	==
	||
	assert

	// contracts/abstracted_account.algo.ts:64
	// assert(admin !== controlledAddress)
	frame_dig -2 // admin: Address
	frame_dig -1 // controlledAddress: Address
	!=
	assert

	// contracts/abstracted_account.algo.ts:66
	// this.admin.value = admin
	byte 0x61646d696e // "admin"
	frame_dig -2 // admin: Address
	app_global_put

	// contracts/abstracted_account.algo.ts:67
	// this.controlledAddress.value = controlledAddress === Address.zeroAddress ? this.app.address : controlledAddress
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	frame_dig -1 // controlledAddress: Address
	global ZeroAddress
	==
	bz ternary1_false
	global CurrentApplicationAddress
	b ternary1_end

ternary1_false:
	frame_dig -1 // controlledAddress: Address

ternary1_end:
	app_global_put
	retsub

// arc58_verifyAuthAddr()void
abi_route_arc58_verifyAuthAddr:
	// execute arc58_verifyAuthAddr()void
	callsub arc58_verifyAuthAddr
	int 1
	return

// arc58_verifyAuthAddr(): void
//
// Verify the abstracted account is rekeyed to this app
arc58_verifyAuthAddr:
	proto 0 0

	// contracts/abstracted_account.algo.ts:74
	// assert(this.controlledAddress.value.authAddr === this.getAuthAddr())
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	callsub getAuthAddr
	==
	assert
	retsub

// arc58_rekeyTo(address,bool)void
abi_route_arc58_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc58_rekeyTo(address,bool)void
	callsub arc58_rekeyTo
	int 1
	return

// arc58_rekeyTo(addr: Address, flash: boolean): void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
arc58_rekeyTo:
	proto 2 0

	// contracts/abstracted_account.algo.ts:84
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:86
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:87
	// sender: this.controlledAddress.value
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:88
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:89
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:90
	// note: 'rekeying abstracted account'
	byte 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// if1_condition
	// contracts/abstracted_account.algo.ts:93
	// flash
	frame_dig -2 // flash: boolean
	bz if1_end

	// if1_consequent
	// contracts/abstracted_account.algo.ts:93
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount

if1_end:
	retsub

// arc58_rekeyToPlugin(application)void
abi_route_arc58_rekeyToPlugin:
	// plugin: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute arc58_rekeyToPlugin(application)void
	callsub arc58_rekeyToPlugin
	int 1
	return

// arc58_rekeyToPlugin(plugin: Application): void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
arc58_rekeyToPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/abstracted_account.algo.ts:102
	// globalKey: PluginsKey = { application: plugin, allowedCaller: globals.zeroAddress }
	frame_dig -1 // plugin: Application
	itob
	global ZeroAddress
	concat
	frame_bury 0 // globalKey: PluginsKey

	// if2_condition
	// contracts/abstracted_account.algo.ts:105
	// !this.plugins(globalKey).exists || this.plugins(globalKey).value < globals.latestTimestamp
	byte 0x70 // "p"
	frame_dig 0 // globalKey: PluginsKey
	concat
	box_len
	swap
	pop
	!
	dup
	bnz skip_or1
	byte 0x70 // "p"
	frame_dig 0 // globalKey: PluginsKey
	concat
	box_get
	assert
	btoi
	global LatestTimestamp
	<
	||

skip_or1:
	bz if2_end

	// if2_consequent
	// contracts/abstracted_account.algo.ts:106
	// key: PluginsKey = { application: plugin, allowedCaller: this.txn.sender }
	frame_dig -1 // plugin: Application
	itob
	txn Sender
	concat
	frame_bury 1 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:107
	// assert(this.plugins(key).exists && this.plugins(key).value > globals.latestTimestamp)
	byte 0x70 // "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz skip_and0
	byte 0x70 // "p"
	frame_dig 1 // key: PluginsKey
	concat
	box_get
	assert
	btoi
	global LatestTimestamp
	>
	&&

skip_and0:
	assert

if2_end:
	// contracts/abstracted_account.algo.ts:110
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: this.controlledAddress.value,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/abstracted_account.algo.ts:111
	// sender: this.controlledAddress.value
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	itxn_field Sender

	// contracts/abstracted_account.algo.ts:112
	// receiver: this.controlledAddress.value
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	itxn_field Receiver

	// contracts/abstracted_account.algo.ts:113
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: Application
	app_params_get AppAddress
	pop
	itxn_field RekeyTo

	// contracts/abstracted_account.algo.ts:114
	// note: 'rekeying to plugin app'
	byte 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/abstracted_account.algo.ts:117
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount
	retsub

// arc58_rekeyToNamedPlugin(string)void
abi_route_arc58_rekeyToNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_rekeyToNamedPlugin(string)void
	callsub arc58_rekeyToNamedPlugin
	int 1
	return

// arc58_rekeyToNamedPlugin(name: string): void
//
// Temporarily rekey to a named plugin app address
//
// @param name The name of the plugin to rekey to
arc58_rekeyToNamedPlugin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:126
	// this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application)
	int 0
	int 8
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	cover 2
	box_extract
	btoi
	callsub arc58_rekeyToPlugin
	retsub

// arc58_changeAdmin(account)void
abi_route_arc58_changeAdmin:
	// newAdmin: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute arc58_changeAdmin(account)void
	callsub arc58_changeAdmin
	int 1
	return

// arc58_changeAdmin(newAdmin: Account): void
//
// Change the admin for this app
//
// @param newAdmin The new admin
arc58_changeAdmin:
	proto 1 0

	// contracts/abstracted_account.algo.ts:135
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:136
	// assert(newAdmin !== this.controlledAddress.value)
	frame_dig -1 // newAdmin: Account
	byte 0x636f6e74726f6c6c656441646472657373 // "controlledAddress"
	app_global_get
	!=
	assert

	// contracts/abstracted_account.algo.ts:137
	// this.admin.value = newAdmin
	byte 0x61646d696e // "admin"
	frame_dig -1 // newAdmin: Account
	app_global_put
	retsub

// arc58_addPlugin(application,address,uint64)void
abi_route_arc58_addPlugin:
	// end: uint64
	txna ApplicationArgs 3
	btoi

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute arc58_addPlugin(application,address,uint64)void
	callsub arc58_addPlugin
	int 1
	return

// arc58_addPlugin(app: Application, allowedCaller: Address, end: uint64): void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param end The timestamp when the permission expires
arc58_addPlugin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:149
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:150
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: Application
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:151
	// this.plugins(key).value = end
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -3 // end: uint64
	itob
	box_put
	retsub

// arc58_removePlugin(application,address)void
abi_route_arc58_removePlugin:
	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// app: application
	txna ApplicationArgs 1
	btoi
	txnas Applications

	// execute arc58_removePlugin(application,address)void
	callsub arc58_removePlugin
	int 1
	return

// arc58_removePlugin(app: Application, allowedCaller: Address): void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
arc58_removePlugin:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:160
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:162
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: Application
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:163
	// this.plugins(key).delete()
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_del
	retsub

// arc58_addNamedPlugin(string,application,address,uint64)void
abi_route_arc58_addNamedPlugin:
	// end: uint64
	txna ApplicationArgs 4
	btoi

	// allowedCaller: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// app: application
	txna ApplicationArgs 2
	btoi
	txnas Applications

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_addNamedPlugin(string,application,address,uint64)void
	callsub arc58_addNamedPlugin
	int 1
	return

// arc58_addNamedPlugin(name: string, app: Application, allowedCaller: Address, end: uint64): void
//
// Add a named plugin
//
// @param app The plugin app
// @param name The plugin name
arc58_addNamedPlugin:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:173
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:174
	// assert(!this.namedPlugins(name).exists)
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/abstracted_account.algo.ts:176
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -2 // app: Application
	itob
	frame_dig -3 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// contracts/abstracted_account.algo.ts:177
	// this.namedPlugins(name).value = key
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	frame_dig 0 // key: PluginsKey
	box_put

	// contracts/abstracted_account.algo.ts:178
	// this.plugins(key).value = end
	byte 0x70 // "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -4 // end: uint64
	itob
	box_put
	retsub

// arc58_removeNamedPlugin(string)void
abi_route_arc58_removeNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_removeNamedPlugin(string)void
	callsub arc58_removeNamedPlugin
	int 1
	return

// arc58_removeNamedPlugin(name: string): void
//
// Remove a named plugin
//
// @param name The plugin name
arc58_removeNamedPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/abstracted_account.algo.ts:187
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	byte 0x61646d696e // "admin"
	app_global_get
	==
	assert

	// contracts/abstracted_account.algo.ts:189
	// app = this.namedPlugins(name).value
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	frame_bury 0 // storage key//app

	// contracts/abstracted_account.algo.ts:190
	// this.namedPlugins(name).delete()
	byte 0x6e // "n"
	frame_dig -1 // name: string
	concat
	box_del

	// contracts/abstracted_account.algo.ts:191
	// this.plugins(app).delete()
	byte 0x70 // "p"
	frame_dig 0 // storage key//app
	box_get
	assert
	concat
	box_del
	retsub

create_NoOp:
	method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "arc58_verifyAuthAddr()void"
	method "arc58_rekeyTo(address,bool)void"
	method "arc58_rekeyToPlugin(application)void"
	method "arc58_rekeyToNamedPlugin(string)void"
	method "arc58_changeAdmin(account)void"
	method "arc58_addPlugin(application,address,uint64)void"
	method "arc58_removePlugin(application,address)void"
	method "arc58_addNamedPlugin(string,application,address,uint64)void"
	method "arc58_removeNamedPlugin(string)void"
	txna ApplicationArgs 0
	match abi_route_arc58_verifyAuthAddr abi_route_arc58_rekeyTo abi_route_arc58_rekeyToPlugin abi_route_arc58_rekeyToNamedPlugin abi_route_arc58_changeAdmin abi_route_arc58_addPlugin abi_route_arc58_removePlugin abi_route_arc58_addNamedPlugin abi_route_arc58_removeNamedPlugin
	err