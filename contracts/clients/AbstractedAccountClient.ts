/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "verifyAppAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekeyTo(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekeyToPlugin(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeAdmin(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPlugin(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removePlugin(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "address": {
          "type": "bytes",
          "key": "address"
        },
        "authAddr": {
          "type": "bytes",
          "key": "authAddr"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjY4LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgovLyB2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQoKXZvaWQKLy8KLy8gRW5zdXJlIHRoYXQgYnkgdGhlIGVuZCBvZiB0aGUgZ3JvdXAgdGhlIGFic3RyYWN0ZWQgYWNjb3VudCBoYXMgY29udHJvbCBvZiBpdHMgYWRkcmVzcwp2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQ6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czoyOQoJLy8gbGFzdFR4biA9IHRoaXMudHhuR3JvdXBbdGhpcy50eG5Hcm91cC5sZW5ndGggLSAxXQoJZ2xvYmFsIEdyb3VwU2l6ZQoJaW50IDEKCS0KCWZyYW1lX2J1cnkgMCAvLyBsYXN0VHhuOiB0eG4KCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6MzIKCS8vIGxhc3RUeG4uc2VuZGVyICE9PSB0aGlzLmFkZHJlc3MudmFsdWUgfHwgbGFzdFR4bi5yZWtleVRvICE9PSB0aGlzLmF1dGhBZGRyLnZhbHVlCglmcmFtZV9kaWcgMCAvLyBsYXN0VHhuOiB0eG4KCWd0eG5zIFNlbmRlcgoJYnl0ZSAweDYxNjQ2NDcyNjU3MzczIC8vICJhZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCSE9CglkdXAKCWJueiBza2lwX29yMAoJZnJhbWVfZGlnIDAgLy8gbGFzdFR4bjogdHhuCglndHhucyBSZWtleVRvCglieXRlIDB4NjE3NTc0Njg0MTY0NjQ3MiAvLyAiYXV0aEFkZHIiCglhcHBfZ2xvYmFsX2dldAoJIT0KCXx8Cgpza2lwX29yMDoKCWJ6IGlmMF9lbmQKCgkvLyBpZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjMzCgkvLyB2ZXJpZnlBcHBDYWxsVHhuKGxhc3RUeG4sIHsKCS8vICAgICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5hcHAsCgkvLyAgICAgICB9KQoJLy8gdmVyaWZ5IGFwcGwKCWZyYW1lX2RpZyAwIC8vIGxhc3RUeG46IHR4bgoJZ3R4bnMgVHlwZUVudW0KCWludCBhcHBsCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAwIC8vIGxhc3RUeG46IHR4bgoJZ3R4bnMgQXBwbGljYXRpb25JRAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czozNgoJLy8gYXNzZXJ0KGxhc3RUeG4uYXBwbGljYXRpb25BcmdzWzBdID09PSBtZXRob2QoJ3ZlcmlmeUFwcEF1dGhBZGRyKCl2b2lkJykpCglmcmFtZV9kaWcgMCAvLyBsYXN0VHhuOiB0eG4KCWd0eG5zIEFwcGxpY2F0aW9uQXJncyAwCgltZXRob2QgInZlcmlmeUFwcEF1dGhBZGRyKCl2b2lkIgoJPT0KCWFzc2VydAoKaWYwX2VuZDoKCXJldHN1YgoKYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gYWRtaW46IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBhZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzLGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyxhZGRyZXNzKXZvaWQKLy8KLy8gQ3JlYXRlIGFuIGFic3RyYWN0ZWQgYWNjb3VudAovLwovLyBAcGFyYW0gYWRkcmVzcyBUaGUgYWRkcmVzcyB0byB1c2UgZm9yIHRoZSBhYnN0cmFjdGVkIGFjY291bnQuIElmIHplcm9BZGRyZXNzLCB0aGVuIHRoZSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCBhY2NvdW50IHdpbGwgYmUgdXNlZAovLyBAcGFyYW0gYWRtaW4gVGhlIGFkbWluIGZvciB0aGlzIGFwcApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo0NwoJLy8gdmVyaWZ5QXBwQ2FsbFR4bih0aGlzLnR4biwgewoJLy8gICAgICAgc2VuZGVyOiB7IGluY2x1ZGVkSW46IFthZGRyZXNzLCBhZG1pbl0gfSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFkZHJlc3M6IEFkZHJlc3MKCT09Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gYWRtaW46IEFkZHJlc3MKCT09Cgl8fAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjUxCgkvLyBhc3NlcnQoYWRtaW4gIT09IGFkZHJlc3MpCglmcmFtZV9kaWcgLTIgLy8gYWRtaW46IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBhZGRyZXNzOiBBZGRyZXNzCgkhPQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjUzCgkvLyB0aGlzLmFkbWluLnZhbHVlID0gYWRtaW4KCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWZyYW1lX2RpZyAtMiAvLyBhZG1pbjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6NTQKCS8vIHRoaXMuYWRkcmVzcy52YWx1ZSA9IGFkZHJlc3MgPT09IEFkZHJlc3MuemVyb0FkZHJlc3MgPyB0aGlzLmFwcC5hZGRyZXNzIDogYWRkcmVzcwoJYnl0ZSAweDYxNjQ2NDcyNjU3MzczIC8vICJhZGRyZXNzIgoJZnJhbWVfZGlnIC0xIC8vIGFkZHJlc3M6IEFkZHJlc3MKCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWJ6IHRlcm5hcnkwX2ZhbHNlCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYiB0ZXJuYXJ5MF9lbmQKCnRlcm5hcnkwX2ZhbHNlOgoJZnJhbWVfZGlnIC0xIC8vIGFkZHJlc3M6IEFkZHJlc3MKCnRlcm5hcnkwX2VuZDoKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjU1CgkvLyB0aGlzLmF1dGhBZGRyLnZhbHVlID0gdGhpcy5hZGRyZXNzLnZhbHVlID09PSB0aGlzLmFwcC5hZGRyZXNzID8gQWRkcmVzcy56ZXJvQWRkcmVzcyA6IHRoaXMuYXBwLmFkZHJlc3MKCWJ5dGUgMHg2MTc1NzQ2ODQxNjQ2NDcyIC8vICJhdXRoQWRkciIKCWJ5dGUgMHg2MTY0NjQ3MjY1NzM3MyAvLyAiYWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWJ6IHRlcm5hcnkxX2ZhbHNlCglnbG9iYWwgWmVyb0FkZHJlc3MKCWIgdGVybmFyeTFfZW5kCgp0ZXJuYXJ5MV9mYWxzZToKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgp0ZXJuYXJ5MV9lbmQ6CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgphYmlfcm91dGVfdmVyaWZ5QXBwQXV0aEFkZHI6CgkvLyBleGVjdXRlIHZlcmlmeUFwcEF1dGhBZGRyKCl2b2lkCgljYWxsc3ViIHZlcmlmeUFwcEF1dGhBZGRyCglpbnQgMQoJcmV0dXJuCgovLyB2ZXJpZnlBcHBBdXRoQWRkcigpdm9pZAovLwovLyBWZXJpZnkgdGhlIGFic3RyYWN0ZWQgYWNjb3VudCBhZGRyZXNzIGlzIHJla2V5ZWQgdG8gdGhpcyBhcHAKdmVyaWZ5QXBwQXV0aEFkZHI6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6NjIKCS8vIGFzc2VydCh0aGlzLmFkZHJlc3MudmFsdWUuYXV0aEFkZHIgPT09IHRoaXMuYXV0aEFkZHIudmFsdWUpCglieXRlIDB4NjE2NDY0NzI2NTczNzMgLy8gImFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJYWNjdF9wYXJhbXNfZ2V0IEFjY3RBdXRoQWRkcgoJYXNzZXJ0CglieXRlIDB4NjE3NTc0Njg0MTY0NjQ3MiAvLyAiYXV0aEFkZHIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgphYmlfcm91dGVfcmVrZXlUbzoKCS8vIGZsYXNoOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDEKCT09Cglhc3NlcnQKCWludCAwCglnZXRiaXQKCgkvLyBhZGRyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSByZWtleVRvKGJvb2wsYWRkcmVzcyl2b2lkCgljYWxsc3ViIHJla2V5VG8KCWludCAxCglyZXR1cm4KCi8vIHJla2V5VG8oYm9vbCxhZGRyZXNzKXZvaWQKLy8KLy8gUmVrZXkgdGhlIGFkZHJlc3MgdG8gYW5vdGhlciBhY2NvdW50LiBQcmltYXJpbHkgdXNlZnVsIGZvciByZWtleWluZyB0byBhbiBFT0EKLy8KLy8gQHBhcmFtIGFkZHIgVGhlIGFkZHJlc3MgdG8gcmVrZXkgdG8KLy8gQHBhcmFtIGZsYXNoIFdoZXRoZXIgb3Igbm90IHRoaXMgc2hvdWxkIGJlIGEgZmxhc2ggcmVrZXkuIElmIHRydWUsIHRoZSByZWtleSBiYWNrIHRvIHRoZSBhZGRyZXNzIG11c3QgZG9uZSBpbiB0aGUgc2FtZSB0eG4gZ3JvdXAgYXMgdGhpcyBjYWxsCnJla2V5VG86Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6NzIKCS8vIHZlcmlmeUFwcENhbGxUeG4odGhpcy50eG4sIHsgc2VuZGVyOiB0aGlzLmFkbWluLnZhbHVlIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo3NAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmFkZHJlc3MudmFsdWUsCgkvLyAgICAgICByZWNlaXZlcjogYWRkciwKCS8vICAgICAgIHJla2V5VG86IGFkZHIsCgkvLyAgICAgICBub3RlOiAncmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50JywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo3NQoJLy8gc2VuZGVyOiB0aGlzLmFkZHJlc3MudmFsdWUKCWJ5dGUgMHg2MTY0NjQ3MjY1NzM3MyAvLyAiYWRkcmVzcyIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo3NgoJLy8gcmVjZWl2ZXI6IGFkZHIKCWZyYW1lX2RpZyAtMSAvLyBhZGRyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjc3CgkvLyByZWtleVRvOiBhZGRyCglmcmFtZV9kaWcgLTEgLy8gYWRkcjogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWtleVRvCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjc4CgkvLyBub3RlOiAncmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50JwoJYnl0ZSAweDcyNjU2YjY1Nzk2OTZlNjcyMDYxNjI3Mzc0NzI2MTYzNzQ2NTY0MjA2MTYzNjM2Zjc1NmU3NCAvLyAicmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50IgoJaXR4bl9maWVsZCBOb3RlCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo4MQoJLy8gZmxhc2gKCWZyYW1lX2RpZyAtMiAvLyBmbGFzaDogYm9vbGVhbgoJYnogaWYxX2VuZAoKCS8vIGlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6ODEKCS8vIHRoaXMudmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50KCkKCWNhbGxzdWIgdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50CgppZjFfZW5kOgoJcmV0c3ViCgphYmlfcm91dGVfcmVrZXlUb1BsdWdpbjoKCS8vIHBsdWdpbjogYXBwbGljYXRpb24KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFwcGxpY2F0aW9ucwoKCS8vIGV4ZWN1dGUgcmVrZXlUb1BsdWdpbihhcHBsaWNhdGlvbil2b2lkCgljYWxsc3ViIHJla2V5VG9QbHVnaW4KCWludCAxCglyZXR1cm4KCi8vIHJla2V5VG9QbHVnaW4oYXBwbGljYXRpb24pdm9pZAovLwovLyBUZW1wb3JhcmlseSByZWtleSB0byBhbiBhcHByb3ZlZCBwbHVnaW4gYXBwIGFkZHJlc3MKLy8KLy8gQHBhcmFtIHBsdWdpbiBUaGUgYXBwIHRvIHJla2V5IHRvCnJla2V5VG9QbHVnaW46Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6OTAKCS8vIGFzc2VydCh0aGlzLnBsdWdpbnMocGx1Z2luKS5leGlzdHMpCglmcmFtZV9kaWcgLTEgLy8gcGx1Z2luOiBBcHBsaWNhdGlvbgoJaXRvYgoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6OTIKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy5hZGRyZXNzLnZhbHVlLAoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYWRkcmVzcy52YWx1ZSwKCS8vICAgICAgIHJla2V5VG86IHBsdWdpbi5hZGRyZXNzLAoJLy8gICAgICAgbm90ZTogJ3Jla2V5aW5nIHRvIHBsdWdpbiBhcHAnLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjkzCgkvLyBzZW5kZXI6IHRoaXMuYWRkcmVzcy52YWx1ZQoJYnl0ZSAweDYxNjQ2NDcyNjU3MzczIC8vICJhZGRyZXNzIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjk0CgkvLyByZWNlaXZlcjogdGhpcy5hZGRyZXNzLnZhbHVlCglieXRlIDB4NjE2NDY0NzI2NTczNzMgLy8gImFkZHJlc3MiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo5NQoJLy8gcmVrZXlUbzogcGx1Z2luLmFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwbHVnaW46IEFwcGxpY2F0aW9uCglhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCglhc3NlcnQKCWl0eG5fZmllbGQgUmVrZXlUbwoKCS8vIGNvbnRyYWN0cy9hYnN0cmFjdGVkX2FjY291bnQuYWxnby50czo5NgoJLy8gbm90ZTogJ3Jla2V5aW5nIHRvIHBsdWdpbiBhcHAnCglieXRlIDB4NzI2NTZiNjU3OTY5NmU2NzIwNzQ2ZjIwNzA2Yzc1Njc2OTZlMjA2MTcwNzAgLy8gInJla2V5aW5nIHRvIHBsdWdpbiBhcHAiCglpdHhuX2ZpZWxkIE5vdGUKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjk5CgkvLyB0aGlzLnZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudCgpCgljYWxsc3ViIHZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudAoJcmV0c3ViCgphYmlfcm91dGVfY2hhbmdlQWRtaW46CgkvLyBuZXdBZG1pbjogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQWNjb3VudHMKCgkvLyBleGVjdXRlIGNoYW5nZUFkbWluKGFjY291bnQpdm9pZAoJY2FsbHN1YiBjaGFuZ2VBZG1pbgoJaW50IDEKCXJldHVybgoKLy8gY2hhbmdlQWRtaW4oYWNjb3VudCl2b2lkCi8vCi8vIENoYW5nZSB0aGUgYWRtaW4gZm9yIHRoaXMgYXBwCi8vCi8vIEBwYXJhbSBuZXdBZG1pbiBUaGUgbmV3IGFkbWluCmNoYW5nZUFkbWluOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjEwOAoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hZG1pbi52YWx1ZSB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6MTA5CgkvLyB0aGlzLmFkbWluLnZhbHVlID0gbmV3QWRtaW4KCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWZyYW1lX2RpZyAtMSAvLyBuZXdBZG1pbjogQWNjb3VudAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX2FkZFBsdWdpbjoKCS8vIGFwcDogYXBwbGljYXRpb24KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFwcGxpY2F0aW9ucwoKCS8vIGV4ZWN1dGUgYWRkUGx1Z2luKGFwcGxpY2F0aW9uKXZvaWQKCWNhbGxzdWIgYWRkUGx1Z2luCglpbnQgMQoJcmV0dXJuCgovLyBhZGRQbHVnaW4oYXBwbGljYXRpb24pdm9pZAovLwovLyBBZGQgYW4gYXBwIHRvIHRoZSBsaXN0IG9mIGFwcHJvdmVkIHBsdWdpbnMKLy8KLy8gQHBhcmFtIGFwcCBUaGUgYXBwIHRvIGFkZAphZGRQbHVnaW46Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6MTE4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvYWJzdHJhY3RlZF9hY2NvdW50LmFsZ28udHM6MTIwCgkvLyB0aGlzLnBsdWdpbnMoYXBwKS5jcmVhdGUoMCkKCWZyYW1lX2RpZyAtMSAvLyBhcHA6IEFwcGxpY2F0aW9uCglpdG9iCglpbnQgMAoJYm94X2NyZWF0ZQoJcmV0c3ViCgphYmlfcm91dGVfcmVtb3ZlUGx1Z2luOgoJLy8gYXBwOiBhcHBsaWNhdGlvbgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXBwbGljYXRpb25zCgoJLy8gZXhlY3V0ZSByZW1vdmVQbHVnaW4oYXBwbGljYXRpb24pdm9pZAoJY2FsbHN1YiByZW1vdmVQbHVnaW4KCWludCAxCglyZXR1cm4KCi8vIHJlbW92ZVBsdWdpbihhcHBsaWNhdGlvbil2b2lkCi8vCi8vIFJlbW92ZSBhbiBhcHAgZnJvbSB0aGUgbGlzdCBvZiBhcHByb3ZlZCBwbHVnaW5zCi8vCi8vIEBwYXJhbSBhcHAgVGhlIGFwcCB0byByZW1vdmUKcmVtb3ZlUGx1Z2luOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjEyOQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbi52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2Fic3RyYWN0ZWRfYWNjb3VudC5hbGdvLnRzOjEzMQoJLy8gdGhpcy5wbHVnaW5zKGFwcCkuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyBhcHA6IEFwcGxpY2F0aW9uCglpdG9iCglib3hfZGVsCglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzLGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgInZlcmlmeUFwcEF1dGhBZGRyKCl2b2lkIgoJbWV0aG9kICJyZWtleVRvKGFkZHJlc3MsYm9vbCl2b2lkIgoJbWV0aG9kICJyZWtleVRvUGx1Z2luKGFwcGxpY2F0aW9uKXZvaWQiCgltZXRob2QgImNoYW5nZUFkbWluKGFjY291bnQpdm9pZCIKCW1ldGhvZCAiYWRkUGx1Z2luKGFwcGxpY2F0aW9uKXZvaWQiCgltZXRob2QgInJlbW92ZVBsdWdpbihhcHBsaWNhdGlvbil2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3ZlcmlmeUFwcEF1dGhBZGRyIGFiaV9yb3V0ZV9yZWtleVRvIGFiaV9yb3V0ZV9yZWtleVRvUGx1Z2luIGFiaV9yb3V0ZV9jaGFuZ2VBZG1pbiBhYmlfcm91dGVfYWRkUGx1Z2luIGFiaV9yb3V0ZV9yZW1vdmVQbHVnaW4KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedAccount",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account",
        "args": [
          {
            "name": "address",
            "type": "address",
            "desc": "The address to use for the abstracted account. If zeroAddress, then the address of the contract account will be used"
          },
          {
            "name": "admin",
            "type": "address",
            "desc": "The admin for this app"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyAppAuthAddr",
        "desc": "Verify the abstracted account address is rekeyed to this app",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekeyTo",
        "desc": "Rekey the address to another account. Primarily useful for rekeying to an EOA",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The address to rekey to"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the address must done in the same txn group as this call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekeyToPlugin",
        "desc": "Temporarily rekey to an approved plugin app address",
        "args": [
          {
            "name": "plugin",
            "type": "application",
            "desc": "The app to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeAdmin",
        "desc": "Change the admin for this app",
        "args": [
          {
            "name": "newAdmin",
            "type": "account",
            "desc": "The new admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addPlugin",
        "desc": "Add an app to the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removePlugin",
        "desc": "Remove an app from the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccount = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: {
        /**
         * The address to use for the abstracted account. If zeroAddress, then the address of the contract account will be used
         */
        address: string
        /**
         * The admin for this app
         */
        admin: string
      }
      argsTuple: [address: string, admin: string]
      returns: void
    }>
    & Record<'verifyAppAuthAddr()void' | 'verifyAppAuthAddr', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'rekeyTo(address,bool)void' | 'rekeyTo', {
      argsObj: {
        /**
         * The address to rekey to
         */
        addr: string
        /**
         * Whether or not this should be a flash rekey. If true, the rekey back to the address must done in the same txn group as this call
         */
        flash: boolean
      }
      argsTuple: [addr: string, flash: boolean]
      returns: void
    }>
    & Record<'rekeyToPlugin(application)void' | 'rekeyToPlugin', {
      argsObj: {
        /**
         * The app to rekey to
         */
        plugin: number | bigint
      }
      argsTuple: [plugin: number | bigint]
      returns: void
    }>
    & Record<'changeAdmin(account)void' | 'changeAdmin', {
      argsObj: {
        /**
         * The new admin
         */
        newAdmin: string | Uint8Array
      }
      argsTuple: [newAdmin: string | Uint8Array]
      returns: void
    }>
    & Record<'addPlugin(application)void' | 'addPlugin', {
      argsObj: {
        /**
         * The app to add
         */
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: void
    }>
    & Record<'removePlugin(application)void' | 'removePlugin', {
      argsObj: {
        /**
         * The app to remove
         */
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'admin'?: BinaryState
      'address'?: BinaryState
      'authAddr'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AbstractedAccountSig = keyof AbstractedAccount['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AbstractedAccountSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AbstractedAccountCreateCalls = (typeof AbstractedAccountCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | (TypedCallParams<'createApplication(address,address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AbstractedAccountCreateCalls) => AbstractedAccountCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AbstractedAccountCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AbstractedAccount smart contract using the createApplication(address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.address, args.admin],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the verifyAppAuthAddr()void ABI method
   *
   * Verify the abstracted account address is rekeyed to this app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verifyAppAuthAddr()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rekeyTo(address,bool)void ABI method
   *
   * Rekey the address to another account. Primarily useful for rekeying to an EOA
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rekeyTo(args: MethodArgs<'rekeyTo(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rekeyTo(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr, args.flash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rekeyToPlugin(application)void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rekeyToPlugin(args: MethodArgs<'rekeyToPlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rekeyToPlugin(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.plugin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeAdmin(account)void ABI method
   *
   * Change the admin for this app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeAdmin(args: MethodArgs<'changeAdmin(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeAdmin(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newAdmin],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addPlugin(application)void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPlugin(args: MethodArgs<'addPlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addPlugin(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removePlugin(application)void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removePlugin(args: MethodArgs<'removePlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removePlugin(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AbstractedAccount['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AbstractedAccountDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AbstractedAccountCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,address)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AbstractedAccountCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the verifyAppAuthAddr()void ABI method.
   *
   * Verify the abstracted account address is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.verifyAppAuthAddr(args, params))
  }

  /**
   * Calls the rekeyTo(address,bool)void ABI method.
   *
   * Rekey the address to another account. Primarily useful for rekeying to an EOA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rekeyTo(args: MethodArgs<'rekeyTo(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.rekeyTo(args, params))
  }

  /**
   * Calls the rekeyToPlugin(application)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rekeyToPlugin(args: MethodArgs<'rekeyToPlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.rekeyToPlugin(args, params))
  }

  /**
   * Calls the changeAdmin(account)void ABI method.
   *
   * Change the admin for this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeAdmin(args: MethodArgs<'changeAdmin(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.changeAdmin(args, params))
  }

  /**
   * Calls the addPlugin(application)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addPlugin(args: MethodArgs<'addPlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.addPlugin(args, params))
  }

  /**
   * Calls the removePlugin(application)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removePlugin(args: MethodArgs<'removePlugin(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.removePlugin(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AbstractedAccount['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get admin() {
        return AbstractedAccountClient.getBinaryState(state, 'admin')
      },
      get address() {
        return AbstractedAccountClient.getBinaryState(state, 'address')
      },
      get authAddr() {
        return AbstractedAccountClient.getBinaryState(state, 'authAddr')
      },
    }
  }

  public compose(): AbstractedAccountComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyAppAuthAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rekeyTo(args: MethodArgs<'rekeyTo(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rekeyTo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rekeyToPlugin(args: MethodArgs<'rekeyToPlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rekeyToPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeAdmin(args: MethodArgs<'changeAdmin(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeAdmin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addPlugin(args: MethodArgs<'addPlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addPlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removePlugin(args: MethodArgs<'removePlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removePlugin(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the verifyAppAuthAddr()void ABI method.
   *
   * Verify the abstracted account address is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'verifyAppAuthAddr()void'>]>

  /**
   * Calls the rekeyTo(address,bool)void ABI method.
   *
   * Rekey the address to another account. Primarily useful for rekeying to an EOA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rekeyTo(args: MethodArgs<'rekeyTo(address,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'rekeyTo(address,bool)void'>]>

  /**
   * Calls the rekeyToPlugin(application)void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rekeyToPlugin(args: MethodArgs<'rekeyToPlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'rekeyToPlugin(application)void'>]>

  /**
   * Calls the changeAdmin(account)void ABI method.
   *
   * Change the admin for this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin(args: MethodArgs<'changeAdmin(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'changeAdmin(account)void'>]>

  /**
   * Calls the addPlugin(application)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPlugin(args: MethodArgs<'addPlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'addPlugin(application)void'>]>

  /**
   * Calls the removePlugin(application)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removePlugin(args: MethodArgs<'removePlugin(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'removePlugin(application)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
