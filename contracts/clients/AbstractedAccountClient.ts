/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "saveAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyAppAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekeyToEOA(appl,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "rekeyToApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferEOA(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeApp(application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "eoa": {
          "type": "bytes",
          "key": "eoa"
        },
        "eoaAuthAddr": {
          "type": "bytes",
          "key": "eoaAuthAddr"
        },
        "forceFlash": {
          "type": "bytes",
          "key": "forceFlash"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedAccount",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account for an EOA",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "saveAuthAddr",
        "desc": "Save the auth addr of the EOA in state so we can rekey back to it later",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyAppAuthAddr",
        "desc": "Verify the contract account is not rekeyed",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekeyToEOA",
        "desc": "Rekey this contract account to the EOA",
        "args": [
          {
            "name": "saveAuthAddrCall",
            "type": "appl",
            "desc": "Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn group as this call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "rekeyToApp",
        "desc": "Temporarily rekey to an approved app",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferEOA",
        "desc": "Transfer the abstracted account to a new EOA.",
        "args": [
          {
            "name": "newEOA",
            "type": "account",
            "desc": "The new EOA"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addApp",
        "desc": "Add an app to the list of approved apps",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeApp",
        "desc": "Remove an app from the list of approved apps",
        "args": [
          {
            "name": "app",
            "type": "application",
            "desc": "The app to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccount = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'saveAuthAddr()void' | 'saveAuthAddr', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'verifyAppAuthAddr()void' | 'verifyAppAuthAddr', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'rekeyToEOA(appl,bool)void' | 'rekeyToEOA', {
      argsObj: {
        /**
         * Call to saveAuthAddr() to ensure the EOA's auth addr is saved in state
         */
        saveAuthAddrCall: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Whether or not this should be a flash rekey. If true, the rekey back to this contract must done in the same txn group as this call
         */
        flash: boolean
      }
      argsTuple: [saveAuthAddrCall: TransactionToSign | Transaction | Promise<SendTransactionResult>, flash: boolean]
      returns: void
    }>
    & Record<'rekeyToApp(application)void' | 'rekeyToApp', {
      argsObj: {
        /**
         * The app to rekey to
         */
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: void
    }>
    & Record<'transferEOA(account)void' | 'transferEOA', {
      argsObj: {
        /**
         * The new EOA
         */
        newEOA: string | Uint8Array
      }
      argsTuple: [newEOA: string | Uint8Array]
      returns: void
    }>
    & Record<'addApp(application)void' | 'addApp', {
      argsObj: {
        /**
         * The app to add
         */
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: void
    }>
    & Record<'removeApp(application)void' | 'removeApp', {
      argsObj: {
        /**
         * The app to remove
         */
        app: number | bigint
      }
      argsTuple: [app: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'eoa'?: BinaryState
      'eoaAuthAddr'?: BinaryState
      'forceFlash'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AbstractedAccountSig = keyof AbstractedAccount['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AbstractedAccountSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSig> = AbstractedAccount['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AbstractedAccountCreateCalls = (typeof AbstractedAccountCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AbstractedAccountCreateCalls) => AbstractedAccountCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AbstractedAccountCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AbstractedAccount smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the saveAuthAddr()void ABI method
   *
   * Save the auth addr of the EOA in state so we can rekey back to it later
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static saveAuthAddr(args: MethodArgs<'saveAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'saveAuthAddr()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the verifyAppAuthAddr()void ABI method
   *
   * Verify the contract account is not rekeyed
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verifyAppAuthAddr()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rekeyToEOA(appl,bool)void ABI method
   *
   * Rekey this contract account to the EOA
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rekeyToEoa(args: MethodArgs<'rekeyToEOA(appl,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rekeyToEOA(appl,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.saveAuthAddrCall, args.flash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the rekeyToApp(application)void ABI method
   *
   * Temporarily rekey to an approved app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rekeyToApp(args: MethodArgs<'rekeyToApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'rekeyToApp(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferEOA(account)void ABI method
   *
   * Transfer the abstracted account to a new EOA.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferEoa(args: MethodArgs<'transferEOA(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferEOA(account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newEOA],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addApp(application)void ABI method
   *
   * Add an app to the list of approved apps
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addApp(args: MethodArgs<'addApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addApp(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the removeApp(application)void ABI method
   *
   * Remove an app from the list of approved apps
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static removeApp(args: MethodArgs<'removeApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'removeApp(application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.app],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AbstractedAccount['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AbstractedAccountDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AbstractedAccountCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication()void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(AbstractedAccountCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the saveAuthAddr()void ABI method.
   *
   * Save the auth addr of the EOA in state so we can rekey back to it later
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public saveAuthAddr(args: MethodArgs<'saveAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.saveAuthAddr(args, params))
  }

  /**
   * Calls the verifyAppAuthAddr()void ABI method.
   *
   * Verify the contract account is not rekeyed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.verifyAppAuthAddr(args, params))
  }

  /**
   * Calls the rekeyToEOA(appl,bool)void ABI method.
   *
   * Rekey this contract account to the EOA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rekeyToEoa(args: MethodArgs<'rekeyToEOA(appl,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.rekeyToEoa(args, params))
  }

  /**
   * Calls the rekeyToApp(application)void ABI method.
   *
   * Temporarily rekey to an approved app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rekeyToApp(args: MethodArgs<'rekeyToApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.rekeyToApp(args, params))
  }

  /**
   * Calls the transferEOA(account)void ABI method.
   *
   * Transfer the abstracted account to a new EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferEoa(args: MethodArgs<'transferEOA(account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.transferEoa(args, params))
  }

  /**
   * Calls the addApp(application)void ABI method.
   *
   * Add an app to the list of approved apps
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addApp(args: MethodArgs<'addApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.addApp(args, params))
  }

  /**
   * Calls the removeApp(application)void ABI method.
   *
   * Remove an app from the list of approved apps
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public removeApp(args: MethodArgs<'removeApp(application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AbstractedAccountCallFactory.removeApp(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AbstractedAccount['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get eoa() {
        return AbstractedAccountClient.getBinaryState(state, 'eoa')
      },
      get eoaAuthAddr() {
        return AbstractedAccountClient.getBinaryState(state, 'eoaAuthAddr')
      },
      get forceFlash() {
        return AbstractedAccountClient.getBinaryState(state, 'forceFlash')
      },
    }
  }

  public compose(): AbstractedAccountComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      saveAuthAddr(args: MethodArgs<'saveAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.saveAuthAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyAppAuthAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rekeyToEoa(args: MethodArgs<'rekeyToEOA(appl,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rekeyToEoa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rekeyToApp(args: MethodArgs<'rekeyToApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rekeyToApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferEoa(args: MethodArgs<'transferEOA(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferEoa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addApp(args: MethodArgs<'addApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      removeApp(args: MethodArgs<'removeApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.removeApp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate() {
        await promiseChain
        const result = await atc.simulate(client.algod)
        return result
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the saveAuthAddr()void ABI method.
   *
   * Save the auth addr of the EOA in state so we can rekey back to it later
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  saveAuthAddr(args: MethodArgs<'saveAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'saveAuthAddr()void'>]>

  /**
   * Calls the verifyAppAuthAddr()void ABI method.
   *
   * Verify the contract account is not rekeyed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyAppAuthAddr(args: MethodArgs<'verifyAppAuthAddr()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'verifyAppAuthAddr()void'>]>

  /**
   * Calls the rekeyToEOA(appl,bool)void ABI method.
   *
   * Rekey this contract account to the EOA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rekeyToEoa(args: MethodArgs<'rekeyToEOA(appl,bool)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'rekeyToEOA(appl,bool)void'>]>

  /**
   * Calls the rekeyToApp(application)void ABI method.
   *
   * Temporarily rekey to an approved app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rekeyToApp(args: MethodArgs<'rekeyToApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'rekeyToApp(application)void'>]>

  /**
   * Calls the transferEOA(account)void ABI method.
   *
   * Transfer the abstracted account to a new EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferEoa(args: MethodArgs<'transferEOA(account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'transferEOA(account)void'>]>

  /**
   * Calls the addApp(application)void ABI method.
   *
   * Add an app to the list of approved apps
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addApp(args: MethodArgs<'addApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'addApp(application)void'>]>

  /**
   * Calls the removeApp(application)void ABI method.
   *
   * Remove an app from the list of approved apps
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeApp(args: MethodArgs<'removeApp(application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, MethodReturn<'removeApp(application)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerSimulateResult>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerSimulateResult = {
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
